syntax = "proto3";
package sso;

option go_package = "sso.v1;ssov1";


service Auth {
  rpc Register(RegisterRequest) returns (RegisterResponse);
  rpc Login(LoginRequest) returns (LoginResponse);
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
  rpc TestUserOnExist(TestUserOnExistRequest) returns (TestUserOnExistResponse);
  rpc ParseToken(ParseTokenRequest) returns (ParseTokenResponse);
  rpc UpdateLogin(UpdateLoginRequest) returns (UpdateLoginResponse);
  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse);
}

service Permissions {
  rpc SetUserPermission(SetUserPermissionRequest) returns (SetUserPermissionResponse);
  rpc GetUserPermission(GetUserPermissionRequest) returns (GetUserPermissionResponse);
}

// Auth

message RegisterRequest {
  string login = 1;
  string password = 2;
  bytes  app_key = 3;
}

message RegisterResponse {
}

message LoginRequest {
  string login = 1;
  string password = 2;
  bytes  app_key = 3;
}

message LoginResponse {
  string token = 1;
}

message DeleteUserRequest {
  string login = 1;
  bytes  app_key = 3;
}

message DeleteUserResponse {
}

message TestUserOnExistRequest {
  string login = 1;
  bytes  app_key = 3;
}

message TestUserOnExistResponse {
  bool exist = 1;
}

message ParseTokenRequest {
  bytes app_key = 1;
  string token = 2;
}

message ParseTokenResponse {
  string login = 1;
}
message UpdateLoginRequest {
  bytes app_key = 1;
  string login = 2;
  string new_login = 3;
}

message UpdateLoginResponse {
}

message ChangePasswordRequest {
  bytes app_key = 1;
  string login = 2;
  string new_password = 3;
}

message ChangePasswordResponse {
}

// Permissions

message GetUserPermissionRequest {
  bytes app_key = 1;
  string login = 2;
}

message GetUserPermissionResponse {
  int32 permission = 1;
}

message SetUserPermissionRequest {
  bytes app_key = 1;
  string login = 2;
  int32 permission = 3;
}

message SetUserPermissionResponse {
}